// <auto-generated>
using System.Reflection;


namespace Microsoft.AspNetCore.Mvc.DataAnnotations
{
    internal static partial class Resources
    {
        private static global::System.Resources.ResourceManager s_resourceManager;
        internal static global::System.Resources.ResourceManager ResourceManager => s_resourceManager ?? (s_resourceManager = new global::System.Resources.ResourceManager(typeof(Resources)));
        internal static global::System.Globalization.CultureInfo Culture { get; set; }
#if !NET20
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
#endif
        internal static string GetResourceString(string resourceKey, string defaultValue = null) =>  ResourceManager.GetString(resourceKey, Culture);

        private static string GetResourceString(string resourceKey, string[] formatterNames)
        {
           var value = GetResourceString(resourceKey);
           if (formatterNames != null)
           {
               for (var i = 0; i < formatterNames.Length; i++)
               {
                   value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
               }
           }
           return value;
        }

        /// <summary>The model object inside the metadata claimed to be compatible with '{0}', but was actually '{1}'.</summary>
        internal static string @ValidatableObjectAdapter_IncompatibleType => GetResourceString("ValidatableObjectAdapter_IncompatibleType");
        /// <summary>The model object inside the metadata claimed to be compatible with '{0}', but was actually '{1}'.</summary>
        internal static string FormatValidatableObjectAdapter_IncompatibleType(object p0, object p1)
           => string.Format(Culture, GetResourceString("ValidatableObjectAdapter_IncompatibleType"), p0, p1);

        /// <summary>Value cannot be null or empty.</summary>
        internal static string @ArgumentCannotBeNullOrEmpty => GetResourceString("ArgumentCannotBeNullOrEmpty");
        /// <summary>The '{0}' property of '{1}' must not be null.</summary>
        internal static string @PropertyOfTypeCannotBeNull => GetResourceString("PropertyOfTypeCannotBeNull");
        /// <summary>The '{0}' property of '{1}' must not be null.</summary>
        internal static string FormatPropertyOfTypeCannotBeNull(object p0, object p1)
           => string.Format(Culture, GetResourceString("PropertyOfTypeCannotBeNull"), p0, p1);


    }
}
